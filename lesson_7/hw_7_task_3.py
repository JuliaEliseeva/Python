# Задача_3 (ДЗ_7). Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, count: int):
        self.count = count

    def __add__(self, other):
        return f"После сложения: {Cell(self.count + other.count)}"

    def __sub__(self, other):
        if self.count > other.count:
            return f"После вычитания: {Cell(self.count - other.count)}"

        print(f"{self.count} - {other.count}: Невозможно произвести вычитание")

    def __mul__(self, other):
        return f"После умножения: {Cell(self.count * other.count)}"

    def __truediv__(self, other):
        return f"После деления: {Cell(self.count // other.count)}"

    def make_order(self, row: int):
        rows, tail = self.count // row, self.count % row
        return '\n'.join(['*' * row] * rows + (['*' * tail] if tail else []))

    def __str__(self):
        return f"Клетка состоит из {self.count} ячеек"


c_1 = Cell(30)
print(c_1)
c_2 = Cell(20)
print(c_2)
print(c_1 + c_2)
print(c_1 - c_2)
print(c_2 - c_1)
print(c_1 * c_2)
print(c_1 / c_2)
print(c_2 / c_1)
print(c_2.make_order(5))
print(c_1.make_order(2))
